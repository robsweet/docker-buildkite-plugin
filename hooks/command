#!/bin/bash

set -euo pipefail

fix_docker_in_docker_pwd() {
  ORIG_PWD=$PWD
  echo Original PWD is \"$ORIG_PWD\"
  REAL_PWD=$(docker inspect --format='{{ range .Mounts }}{{ if eq .Destination "/buildkite/builds" }}{{ .Source }}{{ end }}{{ end }}' $(docker ps | grep $HOSTNAME | awk '{ print $1}') | grep builds)
  echo Real PWD is \"$REAL_PWD\"
  PWD=$(echo $REAL_PWD | sed -e "s|/builds|$PWD|")
  echo New PWD is \"$PWD\"
}

# if [ -f /.dockerenv ]; then
  fix_docker_in_docker_pwd
# fi

# Reads a list from plugin config into a global result array
# Returns success if values were read
plugin_read_list_into_result() {
  result=()

  for prefix in "$@" ; do
    local i=0
    local parameter="${prefix}_${i}"

    if [[ -n "${!prefix:-}" ]] ; then
      echo "ðŸš¨ Plugin received a string for $prefix, expected an array" >&2
      exit 1
    fi

    while [[ -n "${!parameter:-}" ]]; do
      result+=("${!parameter}")
      i=$((i+1))
      parameter="${prefix}_${i}"
    done
  done

  [[ ${#result[@]} -gt 0 ]] || return 1
}

# docker's -v arguments don't do local path expansion, so we add very simple support for .
expand_relative_volume_path() {
  local path="$1"
  if [[ $path =~ ^\.: ]] ; then
    printf "%s" "${PWD}${path#.}"
  elif [[ $path =~ ^\.(/|\\) ]] ; then
    printf "%s" "${PWD}/${path#.}"
  else
    echo "$path"
  fi
}

is_windows() {
  [[ "$OSTYPE" =~ ^(win|msys|cygwin) ]]
}

is_macos() {
  [[ "$OSTYPE" =~ ^(darwin) ]]
}

debug_mode='off'
if [[ "${BUILDKITE_PLUGIN_DOCKER_DEBUG:-false}" =~ (true|on|1) ]] ; then
  echo "--- :hammer: Enabling debug mode"
  debug_mode='on'
fi

tty_default='on'
mount_agent_default='on'
pwd_default="$PWD"
workdir_default="/workdir"

# Set operating system specific defaults
if is_windows ; then
  tty_default=''
  mount_agent_default=''
  workdir_default="C:\\workdir"
  pwd_default="$(cmd.exe /C "echo %CD%")"
elif is_macos ; then
  mount_agent_default=''
fi

args=()

# Support switching tty off
if [[ "${BUILDKITE_PLUGIN_DOCKER_TTY:-$tty_default}" =~ ^(true|on|1)$ ]] ; then
  args+=("-it")
else
  args+=("-i")
fi

args+=("--rm")

if [[ -n "${BUILDKITE_PLUGIN_DOCKER_MOUNTS:-}" && ! "${BUILDKITE_PLUGIN_DOCKER_MOUNTS:-}" =~ ^(true|false)$ ]] ; then
  echo "ðŸš¨ The Docker Pluginâ€™s mounts configuration option must be an array or a boolean."
  exit 1
fi

if [[ -n "${BUILDKITE_PLUGIN_DOCKER_VOLUMES:-}" && ! "${BUILDKITE_PLUGIN_DOCKER_VOLUMES:-}" =~ ^(true|false)$ ]] ; then
  echo "ðŸš¨ The Docker Pluginâ€™s volumes configuration option must be an array or a boolean."
  exit 1
fi

default_volumes=1

# Handle volumes=true (meaning defaults), otherwise we get an error about it not being an array
if [[ "${BUILDKITE_PLUGIN_DOCKER_MOUNTS:-}" == "true" || "${BUILDKITE_PLUGIN_DOCKER_VOLUMES:-}" == "true" ]] ; then
  :

# Handle volumes=false (meaning no volumes)
elif [[ "${BUILDKITE_PLUGIN_DOCKER_MOUNTS:-}" == "false" || "${BUILDKITE_PLUGIN_DOCKER_VOLUMES:-}" == "false" ]] ; then
  default_volumes=''

# Parse volumes (and deprecated mounts) and add them to the docker args
elif plugin_read_list_into_result BUILDKITE_PLUGIN_DOCKER_VOLUMES BUILDKITE_PLUGIN_DOCKER_MOUNTS ; then
  default_volumes=''
  for arg in "${result[@]}" ; do
    args+=( "--volume" "$(expand_relative_volume_path "${arg}")" )
  done
fi

# By default, mount $PWD onto $WORKDIR
if [[ -n "$default_volumes" ]] ; then
  args+=( "--volume" "${pwd_default}:${BUILDKITE_PLUGIN_DOCKER_WORKDIR:-$workdir_default}" )
fi

# Set workdir if one is provided or if mounts is the default
if [[ -n "${BUILDKITE_PLUGIN_DOCKER_WORKDIR:-}" ]] || [[ -n "$default_volumes" ]]; then
  args+=("--workdir" "${BUILDKITE_PLUGIN_DOCKER_WORKDIR:-$workdir_default}")
fi

# Support docker run --user
if [[ -n "${BUILDKITE_PLUGIN_DOCKER_USER:-}" ]] ; then
  args+=("-u" "${BUILDKITE_PLUGIN_DOCKER_USER:-}")
fi

# Support docker run --group-add
while IFS='=' read -r name _ ; do
  if [[ $name =~ ^(BUILDKITE_PLUGIN_DOCKER_ADDITIONAL_GROUPS_[0-9]+) ]] ; then
    args+=( "--group-add" "${!name}" )
  fi
done < <(env | sort)

# Handle the mount-buildkite-agent option
if [[ "${BUILDKITE_PLUGIN_DOCKER_MOUNT_BUILDKITE_AGENT:-$mount_agent_default}" =~ ^(true|on|1)$ ]] ; then
  if [[ -z "${BUILDKITE_AGENT_BINARY_PATH:-}" ]] ; then
    if ! command -v buildkite-agent >/dev/null 2>&1 ; then
      echo -n "+++ ðŸš¨ Failed to find buildkite-agent in PATH to mount into container, "
      echo "you can disable this behaviour with 'mount-buildkite-agent:false'"
    else
      BUILDKITE_AGENT_BINARY_PATH=$(command -v buildkite-agent)
    fi
  fi
fi

# Mount buildkite-agent if we have a path for it
if [[ -n "${BUILDKITE_AGENT_BINARY_PATH:-}" ]] ; then
  args+=(
    "--env" "BUILDKITE_JOB_ID"
    "--env" "BUILDKITE_BUILD_ID"
    "--env" "BUILDKITE_AGENT_ACCESS_TOKEN"
    "--volume" "$BUILDKITE_AGENT_BINARY_PATH:/usr/bin/buildkite-agent"
  )
fi

# Parse extra env vars and add them to the docker args
while IFS='=' read -r name _ ; do
  if [[ $name =~ ^(BUILDKITE_PLUGIN_DOCKER_ENVIRONMENT_[0-9]+) ]] ; then
    echo "parsed env[$name]"
    args+=( "--env" "${!name}" )
  fi
done < <(env | sort)

# Privileged container
if [[ "${BUILDKITE_PLUGIN_DOCKER_PRIVILEGED:-false}" =~ ^(true|on|1)$ ]] ; then
    args+=( "--privileged" )
fi

# Propagate all environment variables into the container if requested
if [[ "${BUILDKITE_PLUGIN_DOCKER_PROPAGATE_ENVIRONMENT:-false}" =~ ^(true|on|1)$ ]] ; then
  if [[ -n "${BUILDKITE_ENV_FILE:-}" ]] ; then
    # Read in the env file and convert to --env params for docker
    # This is because --env-file doesn't support newlines or quotes per https://docs.docker.com/compose/env-file/#syntax-rules
    while read -r var; do
      echo "${var%%=*}"
      args+=( --env "${var%%=*}" )
    done < "$BUILDKITE_ENV_FILE"
  else
    echo -n "ðŸš¨ Not propagating environment variables to container as \$BUILDKITE_ENV_FILE is not set"
  fi
fi

if [[ "${BUILDKITE_PLUGIN_DOCKER_ALWAYS_PULL:-false}" =~ ^(true|on|1)$ ]] ; then
  echo "--- :docker: Pulling ${BUILDKITE_PLUGIN_DOCKER_IMAGE}"
  docker pull "${BUILDKITE_PLUGIN_DOCKER_IMAGE}"
fi

# Parse network and create it if it don't exist.
if [[ -n "${BUILDKITE_PLUGIN_DOCKER_NETWORK:-}" ]] ; then
  DOCKER_NETWORK_ID=$(docker network ls --quiet --filter "name=${BUILDKITE_PLUGIN_DOCKER_NETWORK}")
  if [[ -z ${DOCKER_NETWORK_ID} ]] ; then
    echo "creating network ${BUILDKITE_PLUGIN_DOCKER_NETWORK}"
    docker network create "${BUILDKITE_PLUGIN_DOCKER_NETWORK}"
  else
    echo "docker network ${BUILDKITE_PLUGIN_DOCKER_NETWORK} already exists"
  fi
  args+=("--network" "${BUILDKITE_PLUGIN_DOCKER_NETWORK:-}")
fi

# Support docker run --runtime
if [[ -n "${BUILDKITE_PLUGIN_DOCKER_RUNTIME:-}" ]] ; then
  args+=("--runtime" "${BUILDKITE_PLUGIN_DOCKER_RUNTIME:-}")
fi

shell=()
shell_disabled=1

if [[ -n "${BUILDKITE_COMMAND}" ]]; then
  shell_disabled=''
fi

# Handle entrypoint if provided, and default shell to disabled
if [[ -n "${BUILDKITE_PLUGIN_DOCKER_ENTRYPOINT:-}" ]] ; then
  args+=("--entrypoint" "${BUILDKITE_PLUGIN_DOCKER_ENTRYPOINT:-}")
  shell_disabled=1
fi

# Handle shell being disabled
if [[ "${BUILDKITE_PLUGIN_DOCKER_SHELL:-}" =~ ^(false|off|0)$ ]] ; then
  shell_disabled=1

# Show a helpful error message if a string version of shell is used
elif [[ -n "${BUILDKITE_PLUGIN_DOCKER_SHELL:-}" ]] ; then
  echo -n "ðŸš¨ The Docker Pluginâ€™s shell configuration option can no longer be specified as a string, "
  echo -n "but only as an array. Please update your pipeline.yml to use an array, "
  echo "for example: [\"/bin/sh\", \"-e\", \"-u\"]."
  echo
  echo -n "Note that the docker plugin will infer a shell if one is required, so you might be able to remove"
  echo "the option entirely"
  exit 1

# Handle shell being provided as a string or list
elif plugin_read_list_into_result BUILDKITE_PLUGIN_DOCKER_SHELL ; then
  shell_disabled=''
  for arg in "${result[@]}" ; do
    shell+=("$arg")
  done
fi

# Add the image in before the shell and command
args+=("${BUILDKITE_PLUGIN_DOCKER_IMAGE}")

# Set a default shell if one is needed
if [[ -z $shell_disabled ]] && [[ ${#shell[@]} -eq 0 ]] ; then
  if is_windows ; then
    shell=("CMD.EXE" "/c")
  else
    shell=("/bin/sh" "-e" "-c")
  fi
fi

command=()

# Show a helpful error message if string version of command is used
if [[ -n "${BUILDKITE_PLUGIN_DOCKER_COMMAND:-}" ]] ; then
  echo -n "ðŸš¨ The Docker Pluginâ€™s command configuration option must be an array."
  exit 1
fi

# Parse plugin command if provided
if plugin_read_list_into_result BUILDKITE_PLUGIN_DOCKER_COMMAND ; then
  for arg in "${result[@]}" ; do
    command+=("$arg")
  done
fi

if [[ ${#command[@]} -gt 0 ]] && [[ -n "${BUILDKITE_COMMAND}" ]] ; then
  echo "+++ Error: Can't use both a step level command and the command parameter of the plugin"
  exit 1
fi

# Assemble the shell and command arguments into the docker arguments

display_command=()

if [[ ${#shell[@]} -gt 0 ]] ; then
  for shell_arg in "${shell[@]}" ; do
    args+=("$shell_arg")
    display_command+=("$shell_arg")
  done
fi

if [[ -n "${BUILDKITE_COMMAND}" ]] ; then
  if is_windows ; then
    # The windows CMD shell only supports multiple commands with &&.
    windows_multi_command=${BUILDKITE_COMMAND//$'\n'/ && }
    args+=("${windows_multi_command}")
    display_command+=("'${windows_multi_command}'")
  else
    args+=("${BUILDKITE_COMMAND}")
    display_command+=("'${BUILDKITE_COMMAND}'")
  fi
elif [[ ${#command[@]} -gt 0 ]] ; then
  for command_arg in "${command[@]}" ; do
    args+=("$command_arg")
    display_command+=("${command_arg}")
  done
fi

echo "--- :docker: Running ${display_command[*]} in ${BUILDKITE_PLUGIN_DOCKER_IMAGE}"

if [[ "${debug_mode:-off}" =~ (on) ]] ; then
  echo "$ docker run ${args[*]}" >&2
fi

# Don't convert paths on gitbash on windows, as that can mangle user paths and cmd options.
# See https://github.com/buildkite-plugins/docker-buildkite-plugin/issues/81 for more information.
( if is_windows ; then export MSYS_NO_PATHCONV=1; fi && docker run "${args[@]}" )
